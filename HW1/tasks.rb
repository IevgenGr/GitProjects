p '1. Дан целочисленный массив. Необходимо вывести вначале его элементы с четными индексами, а затем - с нечетными.'
p 'arr=[1,5,6,45,23,2,47]'
arr = [1, 5, 6, 45, 23, 2, 47]
p arr.select.with_index { |_a, index| index.odd? }.concat arr.select.with_index { |_a, index| index.even? }
p '----------------------------'

p '2 Дан целочисленный массив. Необходимо вывести вначале его элементы с нечетными индексами, а затем - четными.'
p 'arr=[1,5,6,45,23,2,47]'
arr = [1, 5, 6, 45, 23, 2, 47]
p arr.select.with_index { |_a, index| index.even? }.concat arr.select.with_index { |_a, index| index.odd? }
p '----------------------------'

p '3.Дан целочисленный массив. Вывести номер первого из тех его элементов, которые удовлетворяют двойному неравенству: A[0] < A[i] < A[-1]. Если таких элементов нет, то вывести [ ].   '
p 'arr=[1,52,6,49,23,2,12]'
arr = [1, 52, 6, 49, 23, 2, 12]
p arr.index { |element| arr[0] < element && element < arr[-1] } || []
p '----------------------------'

p '4.Дан целочисленный массив. Вывести номер последнего из тех его элементов, которые удовлетворяют двойному неравенству: A[0] < A[i] < A[-1]. Если таких элементов нет, то вывести [ ].'
p 'arr=[1,52,6,49,23,30,27]'
arr = [1, 52, 6, 49, 23, 30, 27]
p arr.index { |element| arr[0] < element && element < arr[-1] } || []

p '----------------------------'

p '5.Дан целочисленный массив. Преобразовать его, прибавив к четным числам первый элемент. Первый и последний элементы массива не изменять.'
p 'arr=[2,52,6,49,23,28,28]'
arr = [2, 52, 6, 49, 23, 28, 28]
p arr.map.with_index { |e, i| e.even? && (i != 0 && i != (arr.count - 1)) ? e + arr.first : e }
p '----------------------------'

p '6.Дан целочисленный массив. Преобразовать его, прибавив к четным числам последний элемент. Первый и последний элементы массива не изменять.'
p 'arr=[1,52,6,49,23,30,28]'
arr = [1, 52, 6, 49, 23, 30, 28]
p arr.map.with_index { |e, i| e.even? && (i != 0 && i != (arr.count - 1)) ? e + arr.last : e }
p '----------------------------'

p '7.Дан целочисленный массив. Преобразовать его, прибавив к нечетным числам последний элемент. Первый и последний элементы массива не изменять.'
p 'arr=[1,52,6,49,23,30,28]'
arr = [1, 52, 6, 49, 23, 30, 28]
p arr.map.with_index { |e, i| e.odd? && (i != 0 && i != (arr.count - 1)) ? e + arr.last : e }
p '----------------------------'

p '8.Дан целочисленный массив. Преобразовать его, прибавив к нечетным числам первый элемент. Первый и последний элементы массива не изменять.'
p 'arr=[1,52,6,49,23,30,27]'
arr = [1, 52, 6, 49, 23, 30, 27]

p arr.map.with_index { |e, i| e.odd? && (i != 0 && i != (arr.count - 1)) ? e + arr.first : e }

p '----------------------------'

p '9.Дан целочисленный массив. Заменить все положительные элементы на значение минимального.'
p 'arr=[1,52,-6,49,-23,30,27]'
arr = [1, 52, -6, 49, -23, 30, 27]

p arr.map { |e| e.positive? ? arr.min : e }
p '----------------------------'

p '10.Дан целочисленный массив. Заменить все положительные элементы на значение максимального.'
p 'arr=[1,52,-6,49,-23,30,27]'
arr = [1, 52, -6, 49, -23, 30, 27]
p arr.map { |e| e.positive? ? arr.max : e }
p '----------------------------'

p '11.Дан целочисленный массив. Заменить все отрицательные элементы на значение минимального.'
p 'arr=[1,52,-6,49,-23,30,27]'
arr = [1, 52, -6, 49, -23, 30, 27]
p arr.map { |e| e.negative? ? arr.min : e }
p '----------------------------'

p '12.Дан целочисленный массив. Заменить все отрицательные элементы на значение максимального.  '
p 'arr=[1,52,-6,49,-23,30,27]'
arr = [1, 52, -6, 49, -23, 30, 27]

p arr.map { |e| e.negative? ? arr.max : e }

p '----------------------------'

p '13.Дан целочисленный массив. Осуществить циклический сдвиг элементов массива влево на одну позицию.'
p 'arr=[1,52,-6,49,-23,30,27]'
arr = [1, 52, -6, 49, -23, 30, 27]

p arr.rotate

p '----------------------------'

p '14.Дан целочисленный массив. Осуществить циклический сдвиг элементов массива вправо на одну позицию.'
p 'arr=[1,52,-6,49,-23,30,27]'
arr = [1, 52, -6, 49, -23, 30, 27]
p arr.rotate(-1)
p '----------------------------'

p '15.Дан целочисленный массив. Проверить, образуют ли элементы арифметическую прогрессию. Если да, то вывести разность прогрессии, если нет - вывести nil.'
p 'arr=[1,4,7,10,13,16,19]'
arr = [1, 4, 7, 10, 13, 16, 19]

def task15(arr)
  diff_progression = arr[1] - arr[0]
  (arr.length - 1).times do |i|
    if (arr[i + 1] - arr[i]) != diff_progression
      diff_progression = nil
      break
    end
  end
  puts diff_progression
end

task15 arr
p '----------------------------'

p '16. Дан целочисленный массив. Проверить, образуют ли элементы геометрическую прогрессию. Если да, то вывести знаменатель прогрессии, если нет - вывести nil.'
p 'arr=[1,3,9,27,81,243,729]'
arr = [1, 3, 9, 27, 81, 243, 729]

def task16(arr)
  znamenatel_progressii = arr[1] / arr[0]
  (arr.length - 1).times do |i|
    if (arr[i + 1] / arr[i]) != znamenatel_progressii
      znamenatel_progressii = nil
      break
    end
  end
  puts znamenatel_progressii
end

task16 arr
p '----------------------------'

p '17.Дан целочисленный массив. Найти количество его локальных максимумов.  '
p 'arr=[1,11,12,27,81,3,729,576]'
arr = [1, 11, 12, 27, 81, 3, 729, 576]

def task17(arr)
  count_local_max = 0
  (arr.length - 2).times do |i|
    count_local_max += 1 if (arr[i + 1] > arr[i]) && (arr[i + 1] > arr[i + 2])
  end
  puts count_local_max
end

task17 arr
p '----------------------------'

p '18.Дан целочисленный массив. Найти количество его локальных минимумов.   '
p 'arr=[1,11,4,27,81,3,729,576]'
arr = [1, 11, 4, 27, 81, 3, 729, 576]

count_local_min = 0
p (arr.length - 2).times do |i|
  count_local_min += 1 if (arr[i + 1] < arr[i]) && (arr[i + 1] < arr[i + 2])
end
p '----------------------------'

p '19.Дан целочисленный массив. Найти максимальный из его локальных максимумов.'
p 'arr=[1,11,14,13,81,564,3,576]'
arr = [1, 11, 14, 13, 81, 564, 3, 576]

arr_max = []
(arr.length - 2).times do |i|
  arr_max.push(arr[i + 1]) if (arr[i + 1] > arr[i]) && (arr[i + 1] > arr[i + 2])
end
puts arr_max.max

p '----------------------------'

p '20.Дан целочисленный массив. Найти минимальный из его локальных минимумов.       '
p 'arr=[1,11,14,13,81,564,729,576]'
arr = [1, 11, 14, 13, 81, 564, 729, 576]

arr_min = []
(arr.length - 2).times do |i|
  arr_min.push(arr[i + 1]) if (arr[i + 1] < arr[i]) && (arr[i + 1] < arr[i + 2])
end
p arr_min.min

p '----------------------------'

p '21.Дано вещественное число R и массив вещественных чисел. Найти элемент массива, который наиболее близок к данному числу.    '
p 'arr=[1.0,4.0,7.0,10.0,13.5,16.0,4.0], R=45'
arr = [1.0, 4.0, 7.0, 10.0, 13.5, 16.0, 4.0]
r = 45.0

def nearest_value(arr, val)
  nearest_value = arr[0]
  diff = (arr[0] - val).abs
  arr.length.times do |i|
    if diff > (arr[i] - r).abs
      diff = (arr[i] - r).abs
      nearest_value = arr[i]
    end
  end
  puts nearest_value
end

nearest_value(arr, r)
p '----------------------------'

p '22.Дано вещественное число R и массив вещественных чисел. Найти элемент массива, который наименее близок к данному числу.'
p 'arr=[1.0,4.0,7.0,10.0,13.5,16.0,4.0], R=45'
arr = [1.0, 4.0, 7.0, 10.0, 13.5, 16.0, 4.0]
r = 45.0

def far_value(arr, val)
  nearest_value = arr[0]
  diff = (arr[0] - val).abs
  arr.length.times do |i|
    if diff < (arr[i] - r).abs
      diff = (arr[i] - r).abs
      nearest_value = arr[i]
    end
  end
  p nearest_value
end

far_value(arr, r)
p '----------------------------'

p ' 23.Дан целочисленный массив. Преобразовать его, вставив перед каждым положительным элементом нулевой элемент.   '
p 'arr=[1,52,-6,49,99,27]'
arr = [1, 52, -6, 49, 99, 27]

def zero_before(arr)
  count_shift = 0
  arr_temp = arr.map { |elem| elem }
  arr_temp_two = arr.map { |elem| elem }
  arr_temp.length.times do |i|
    if (arr_temp[i]).positive?
      arr_temp_two.insert((i + count_shift), 0)
      count_shift += 1
    end
  end
  p arr_temp_two
end

zero_before(arr)
p '----------------------------'

p '24.Дан целочисленный массив. Преобразовать его, вставив перед каждым отрицательным элементом нулевой элемент.'
p 'arr=[1,52,-6,49,-99,27]'
arr = [1, 52, -6, 49, -99, 27]

def before_negative(arr)
  count_shift = 0
  arr_temp = arr.map { |elem| elem }
  arr_temp_two = arr.map { |elem| elem }
  arr_temp.length.times do |i|
    if (arr_temp[i]).negative?
      arr_temp_two.insert((i + count_shift), 0)
      count_shift += 1
    end
  end
  p arr_temp_two
end

before_negative(arr)
p '----------------------------'

p '25.Дан целочисленный массив. Преобразовать его, вставив после каждого положительного элемента нулевой элемент.'
p 'arr=[1,52,-6,49,99,27]'
arr = [1, 52, -6, 49, 99, 27]

def after_positive(arr)
  count_shift = 1
  arr_temp = arr.map { |elem| elem }
  arr_temp_two = arr.map { |elem| elem }
  arr_temp.length.times do |i|
    if (arr_temp[i]).positive?
      arr_temp_two.insert((i + count_shift), 0)
      count_shift += 1
    end
  end
  p arr_temp_two
end

after_positive(arr)
p '----------------------------'

p '26.Дан целочисленный массив. Преобразовать его, вставив после каждого отрицательного элемента нулевой элемент.    '
p 'arr=[1,52,-6,49,-99,27]'
arr = [1, 52, -6, 49, -99, 27]

def after_negative(arr)
  count_shift = 1
  arr_temp = arr.map { |elem| elem }
  arr_temp_two = arr.map { |elem| elem }
  arr_temp.length.times do |i|
    if (arr_temp[i]).negative?
      arr_temp_two.insert((i + count_shift), 0)
      count_shift += 1
    end
  end
  p arr_temp_two
end

after_negative(arr)
p '----------------------------'

p '27.Дан целочисленный массив. Упорядочить его по возрастанию. '
p 'arr=[1,52,-6,49,-99,27]'
arr = [1, 52, -6, 49, -99, 27]
p arr.sort
p '----------------------------'

p '28.Дан целочисленный массив. Упорядочить его по убыванию.    '
p 'arr=[1,52,-6,49,-99,27]'
arr = [1, 52, -6, 49, -99, 27]
p arr.sort.reverse

p '----------------------------'

p '29.Дан целочисленный массив. Вывести индексы массива в том порядке, в котором соответствующие им элементы образуют убывающую последовательность. '
p 'arr=[1,52,-6,49,-99,27]'
arr = [1, 52, -6, 49, -99, 27]
p arr.map.with_index { |e, i| [e, i] }.sort_by { |e, _i| -e }.map { |_e, i| i }
p '----------------------------'

p '30.Дан целочисленный массив. Вывести индексы массива в том порядке, в котором соответствующие им элементы образуют возрастающую последовательность.'
p 'arr=[1,52,-6,49,-99,27]'
arr = [1, 52, -6, 49, -99, 27]
p arr.map.with_index { |e, i| [e, i] }.sort_by { |e, _i| e }.map { |_e, i| i }
p '----------------------------'

p '31.Дан целочисленный массив. Найти индекс минимального элемента. '
p 'arr=[1,52,-6,49,-99,27]'
arr = [1, 52, -6, 49, -99, 27]
puts arr.index(arr.min)
p '----------------------------'

p '32.Дан целочисленный массив. Найти индекс максимального элемента.'
p 'arr=[1,52,-6,49,-99,27]'
arr = [1, 52, -6, 49, -99, 27]
puts arr.index(arr.max)

p '----------------------------'

p '33.Дан целочисленный массив. Найти индекс первого минимального элемента. '
p 'arr=[1,52,-6,49,-99,27]'
arr = [1, 52, -6, 49, -99, 27]

p arr.map.with_index { |e, i| [e, i] }.sort_by { |e, _i| e }.map { |_e, i| i }.first

p '----------------------------'

p '34.Дан целочисленный массив. Найти индекс первого максимального элемента.'
p 'arr=[1,52,-6,49,-99,52]'
arr = [1, 52, -6, 49, -99, 52]

p arr.map.with_index { |e, i| [e, i] }.sort_by { |e, _i| - e }.map { |_e, i| i }.first
p '----------------------------'

p '35.Дан целочисленный массив. Найти индекс последнего минимального элемента.'
p 'arr=[1,52,-6,49,-99,-99]'
arr = [1, 52, -6, 49, -99, -99]
p arr.map.with_index { |e, i| [e, i] }.sort_by { |e, _i| - e }.map { |_e, i| i }.last
p '----------------------------'

p '36.Дан целочисленный массив. Найти индекс последнего максимального элемента. '
p 'arr=[1,99,-6,49,99,1]'
arr = [1, 99, -6, 49, 99, 1]
p arr.map.with_index { |e, i| [e, i] }.sort_by { |e, _i| e }.map { |_e, i| i }.last
p '----------------------------'

p '37.Дан целочисленный массив. Найти количество минимальных элементов.'
p 'arr = [1, 2, 3, 1, 1, 6, 7, 8]'
arr = [1, 2, 3, 1, 1, 6, 7, 8]
p arr.select { |i| arr.min == i }.size
p '----------------------------'

p '38.Дан целочисленный массив. Найти количество максимальных элементов.'
p 'arr = [8, 8, 3, 8, 6, 6, 7, 8]'
arr = [8, 8, 3, 8, 6, 6, 7, 8]
p arr.select { |i| arr.max == i }.size
p '----------------------------'

p '39.Дан целочисленный массив. Найти минимальный четный элемент.   '
p ' arr = [21, 2, 3, 14, 61, 5, 74, 9]'
arr = [21, 2, 3, 14, 61, 5, 74, 9]
p arr.select(&:even?).min
p '----------------------------'

p '40 Дан целочисленный массив. Найти минимальный нечетный элемент. '
p ' arr = [21, 2, 3, 14, 61, 5, 74, 9]'
arr = [21, 2, 3, 14, 61, 5, 74, 9]
p arr.select(&:odd?).min
p '----------------------------'

p '41.Дан целочисленный массив. Найти максимальный четный элемент.'
p ' arr = [21, 2, 3, 14, 61, 5, 74, 9]'
arr = [21, 2, 3, 14, 61, 5, 74, 9]
p arr.select(&:even?).max
p '----------------------------'

p '42.Дан целочисленный массив. Найти максимальный нечетный элемент.'
p ' arr = [21, 2, 3, 14, 61, 5, 74, 9]'
arr = [21, 2, 3, 14, 61, 5, 74, 9]
p arr.select(&:odd?).max
p '----------------------------'

p '43.Дан целочисленный массив. Найти минимальный положительный элемент.    '
p ' [21, -2, 3, -14, 61, 5, 74, 9]'
arr = [21, -2, 3, -14, 61, 5, 74, 9]
p arr.select(&:positive?).min
p '----------------------------'

p '44.Дан целочисленный массив. Найти максимальный отрицательный элемент.   '
p ' [21, -2, 3, -14, 61, 5, 74, 9]'
arr = [21, -2, 3, -14, 61, 5, 74, 9]
p arr.select(&:negative?).max
p '----------------------------'

p '45.Дан целочисленный массив. Найти количество элементов, расположенных перед первым минимальным.'
p 'arr=[1,52,-6,49,-99,-99]'
arr = [4, 52, -6, 1, -99, -99]
p arr.map.with_index { |e, i| [e, i] }.sort_by { |e, _i| e }.map { |_e, i| i }.first
p '----------------------------'

p '46.Дан целочисленный массив. Найти количество элементов, расположенных перед первым максимальным.'
p 'arr=[1,52,-6,49,99,99]'
arr = [4, 52, -6, 1, 99, 99]
p arr.map.with_index { |e, i| [e, i] }.sort_by { |e, _i| - e }.map { |_e, i| i }.first
p '----------------------------'

p '47.Дан целочисленный массив. Найти количество элементов, расположенных после первого максимального.'
p 'arr=[1,99,-6,49,99,99]'
arr = [4, 99, -6, 1, 99, 99]
p arr.length - arr.map.with_index { |e, i| [e, i] }.sort_by { |e, _i| - e }.map { |_e, i| i }.first - 1
p '----------------------------'

p '48.Дан целочисленный массив. Найти количество элементов, расположенных после первого минимального .'
p 'arr=[4,-99,-6,1,-99,99]'
arr = [4, -99, -6, 1, -99, 99]
p arr.length - arr.map.with_index { |e, i| [e, i] }.sort_by { |e, _i| e }.map { |_e, i| i }.first - 1
p '----------------------------'

p '49 Дан целочисленный массив. Найти количество элементов, расположенных перед последним максимальным. '
p 'arr=[4,52,-6,99,99,4]'
arr = [4, 52, -6, 99, 99, 4]
p arr.map.with_index { |e, i| [e, i] }.sort_by { |e, _i| e }.map { |_e, i| i }.last
p '----------------------------'

p '50 Дан целочисленный массив. Найти количество элементов, расположенных перед последним минимальным.'
p 'arr=[4,52,-6,-99,-99,4]'
arr = [4, 52, -6, -99, -99, 4]
p arr.map.with_index { |e, i| [e, i] }.sort_by { |e, _i| - e }.map { |_e, i| i }.last
p '----------------------------'
